import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart'; // LIS√ÑTTY
import '../mallit/kysymys.dart';

class OpenAIPalvelu {
  final String _apiKey = 'Oma avain'; // MUISTA K√ÑYTT√Ñ√Ñ TURVALLISEMPAA TALLENNUSTAPAA API-AVAIMELLE TUOTANNOSSA
  final String _apiUrl = 'https://api.openai.com/v1/chat/completions';

  // SharedPreferences-avain esitetyille kysymyksille
  static const String _esitetytKysymyksetAvain = 'openai_esitetyt_kysymykset_v1';

  // _esitetytKysymykset ladataan nyt asynkronisesti SharedPreferencesista
  Set<String> _esitetytKysymyksetMuistissa = {};
  bool _onkoKysymyksetLadattuMuistiin = false;

  // Konstruktori, joka k√§ynnist√§√§ esitettyjen kysymysten lataamisen
  OpenAIPalvelu() {
    _lataaEsitetytKysymyksetMuistiin();
  }

  Future<void> _lataaEsitetytKysymyksetMuistiin() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final List<String>? tallennetut = prefs.getStringList(_esitetytKysymyksetAvain);
      if (tallennetut != null) {
        _esitetytKysymyksetMuistissa = Set<String>.from(tallennetut);
        print("‚úÖ OpenAI: Esitetyt kysymykset ladattu SharedPreferencesista: ${_esitetytKysymyksetMuistissa.length} kpl");
      } else {
        print("‚ÑπÔ∏è OpenAI: Ei aiempia esitettyj√§ kysymyksi√§ SharedPreferencesissa.");
      }
    } catch (e) {
      print("‚ùå OpenAI: Virhe esitettyjen kysymysten lataamisessa SharedPreferencesista: $e");
    }
    _onkoKysymyksetLadattuMuistiin = true;
  }

  Future<void> _lisaaJaTallennaEsitettyKysymys(String normalisoituKysymys) async {
    _esitetytKysymyksetMuistissa.add(normalisoituKysymys); // Lis√§√§ ensin muistiin
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setStringList(_esitetytKysymyksetAvain, _esitetytKysymyksetMuistissa.toList());
      // print("üíæ OpenAI: Kysymys tallennettu SharedPreferencesiin."); // Voit poistaa t√§m√§n, jos liian verbose
    } catch (e) {
      print("‚ùå OpenAI: Virhe esitetyn kysymyksen tallentamisessa SharedPreferencesiin: $e");
    }
  }

  // Metodi esitettyjen kysymysten tyhjent√§miseen (esim. testausta tai nollausta varten)
  Future<void> tyhjennaHistoria() async {
    _esitetytKysymyksetMuistissa.clear();
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_esitetytKysymyksetAvain);
      print("üóëÔ∏è OpenAI: Kaikki esitetyt kysymykset poistettu SharedPreferencesista ja muistista.");
    } catch (e) {
      print("‚ùå OpenAI: Virhe esitettyjen kysymysten poistamisessa: $e");
    }
  }

  String _normalisoi(String kysymys) {
    return kysymys.trim().toLowerCase().replaceAll(RegExp(r'[^\w\s]'), '');
  }

  Future<Kysymys?> generoiKysymys(String aihe, String vaikeustaso) async {
    // Varmistetaan, ett√§ kysymykset on yritetty ladata ennen jatkamista.
    // T√§m√§ on yksinkertainen tarkistus. Monimutkaisemmissa sovelluksissa
    // saatat haluta k√§ytt√§√§ esim. Completeria tai Streamia ilmoittamaan, kun lataus on valmis.
    if (!_onkoKysymyksetLadattuMuistiin) {
      // Annetaan pieni hetki lataukselle, jos se on juuri k√§ynniss√§.
      // T√§m√§ ei ole t√§ydellinen ratkaisu kilpa-ajotilanteisiin, mutta auttaa yleisimmiss√§ tapauksissa.
      await Future.delayed(const Duration(milliseconds: 500));
      if (!_onkoKysymyksetLadattuMuistiin) {
        print("‚ö†Ô∏è OpenAI: Esitettyjen kysymysten lataus SharedPreferencesista ei ole viel√§ valmis. Yritet√§√§n ladata uudelleen.");
        await _lataaEsitetytKysymyksetMuistiin(); // Varmistetaan, ett√§ lataus on yritetty
      }
    }

    // Rajoitetaan promptiin l√§hetett√§vien kysymysten m√§√§r√§√§ token-rajoitusten vuoksi
    final int maxAiemmatPromptissa = 25; // S√§√§d√§ tarpeen mukaan
    List<String> aiemmatPromptiin;

    if (_esitetytKysymyksetMuistissa.length > maxAiemmatPromptissa) {
      // Otetaan 'take' Setist√§, koska j√§rjestys ei ole taattu.
      // Parempi olisi satunnainen otos tai jokin muu logiikka, jos halutaan "viimeisimm√§t".
      aiemmatPromptiin = _esitetytKysymyksetMuistissa
          .take(maxAiemmatPromptissa)
          .map((k) => '"$k"') // Lis√§t√§√§n lainausmerkit promptia varten
          .toList();
    } else {
      aiemmatPromptiin = _esitetytKysymyksetMuistissa
          .map((k) => '"$k"')
          .toList();
    }

    final prompt = '''
Generoi trivia-kysymys aiheesta "$aihe" vaikeustasolla "$vaikeustaso".
${aiemmatPromptiin.isNotEmpty ? '√Ñl√§ toista seuraavia kysymyksi√§ (tai hyvin samankaltaisia): ${aiemmatPromptiin.join(', ')}.' : ''}
Palauta vastaus seuraavassa JSON-muodossa:
{
  "kysymys": "...",
  "oikea_vastaus": "...",
  "vaarat_vastaukset": ["...", "...", "..."] // Pyydet√§√§n 3 v√§√§r√§√§ vastausta
}
''';
// Huom! V√§hensin vaarat_vastaukset kolmesta kahteen promptissa, jotta se vastaa paremmin yleist√§ trivia-formaattia
// ja v√§hent√§√§ hieman tokenien k√§ytt√∂√§. Voit muuttaa takaisin kolmeen, jos haluat.

    try {
      final response = await http.post(
        Uri.parse(_apiUrl),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $_apiKey',
        },
        body: jsonEncode({
          'model': 'gpt-3.5-turbo',
          'messages': [
            {
              'role': 'system',
              'content': 'Olet avulias teko√§ly, joka generoi uniikkeja trivia-kysymyksi√§ JSON-muodossa. V√§lt√§ antamasta kysymyksi√§, jotka on lueteltu k√§ytt√§j√§n promptissa aiemmin esitettyin√§.'
            },
            {'role': 'user', 'content': prompt}
          ],
          'temperature': 0.75, // Hieman nostettu luovuuden lis√§√§miseksi
          'max_tokens': 150,  // Rajoitetaan vastauksen pituutta varmuuden vuoksi
        }),
      );

      if (response.statusCode == 200) {
        final responseBody = jsonDecode(utf8.decode(response.bodyBytes));
        final messageContent = responseBody['choices'][0]['message']['content'] as String?;

        if (messageContent == null) {
          print('‚ùå OpenAI API -virhe: Vastausviesti puuttuu.');
          return null;
        }

        try {
          final Map<String, dynamic> data = jsonDecode(messageContent);

          // Varmistetaan, ett√§ avaimet l√∂ytyv√§t ja ovat oikeaa tyyppi√§
          final kysymysTeksti = data['kysymys'] as String?;
          final oikeaVastaus = data['oikea_vastaus'] as String?;
          final vaaratVastauksetDynamic = data['vaarat_vastaukset'] as List?;

          if (kysymysTeksti == null || kysymysTeksti.trim().isEmpty) {
            print('‚ùå OpenAI JSON-virhe: "kysymys" puuttuu tai on tyhj√§. Sis√§lt√∂: $messageContent');
            return null;
          }
          if (oikeaVastaus == null || oikeaVastaus.trim().isEmpty) {
            print('‚ùå OpenAI JSON-virhe: "oikea_vastaus" puuttuu tai on tyhj√§. Sis√§lt√∂: $messageContent');
            return null;
          }
          if (vaaratVastauksetDynamic == null || vaaratVastauksetDynamic.isEmpty) {
            print('‚ùå OpenAI JSON-virhe: "vaarat_vastaukset" puuttuu tai on tyhj√§ lista. Sis√§lt√∂: $messageContent');
            return null;
          }

          final List<String> vaaratVastaukset = vaaratVastauksetDynamic
              .map((v) => v.toString()) // Varmistetaan, ett√§ kaikki ovat merkkijonoja
              .where((v) => v.trim().isNotEmpty) // Poistetaan tyhj√§t vastaukset
              .toList();

          if (vaaratVastaukset.isEmpty) {
            print('‚ùå OpenAI JSON-virhe: "vaarat_vastaukset" ei sis√§lt√§nyt kelvollisia merkkijonoja. Sis√§lt√∂: $messageContent');
            return null;
          }

          final kysymysNorm = _normalisoi(kysymysTeksti);

          if (_esitetytKysymyksetMuistissa.contains(kysymysNorm)) {
            print("‚ö†Ô∏è OpenAI: Duplikaatti havaittu (oli jo muistissa/SharedPreferencesissa), ohitetaan: $kysymysTeksti");
           return null;
          }

          // Lis√§√§ uusi kysymys muistiin ja tallenna SharedPreferencesiin
          await _lisaaJaTallennaEsitettyKysymys(kysymysNorm);

          return Kysymys(
            kysymysTeksti: kysymysTeksti,
            oikeaVastaus: oikeaVastaus,
            vaaratVastaukset: vaaratVastaukset,
            kategoria: aihe,
            tyyppi: 'multiple', // Oletetaan edelleen monivalinta
            vaikeus: vaikeustaso,
          );
        } catch (e) {
          print('‚ùå OpenAI: JSON-j√§sennysvirhe: $e\nSis√§lt√∂: $messageContent');
          return null;
        }
      } else {
        print('‚ùå OpenAI API -virhe: ${response.statusCode}\nVastaus: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå OpenAI: Verkkovirhe tai muu odottamaton virhe: $e');
      return null;
    }
  }
}